<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on Yuanjie-跑步爱好者，IT从业者。</title><link>https://shiyuanjie.cn/tags/Python/</link><description>Recent content in Python on Yuanjie-跑步爱好者，IT从业者。</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 08 Jun 2017 18:30:00 +0000</lastBuildDate><atom:link href="https://shiyuanjie.cn/tags/Python/index.xml" rel="self" type="application/rss+xml"/><item><title>什么是Locust</title><link>https://shiyuanjie.cn/posts/Locust/%E4%BB%80%E4%B9%88%E6%98%AFLocust/</link><pubDate>Thu, 08 Jun 2017 18:30:00 +0000</pubDate><guid>https://shiyuanjie.cn/posts/Locust/%E4%BB%80%E4%B9%88%E6%98%AFLocust/</guid><description>&lt;ul>
&lt;li>原文地址：&lt;a href="http://docs.locust.io/en/latest/what-is-locust.html#">http://docs.locust.io/en/latest/what-is-locust.html#&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="什么是locust">什么是Locust&lt;/h2>
&lt;p>Locust是一个容易使用、分布式的压力测试工具。它是用于网站压力测试(或其它系统)并找出多少用户一个系统可以承载。&lt;/p>
&lt;p>在测试过程中，策略就是一个Locust的蠕虫将会攻击你的网站。每一个locust的行为(或你使用的测试用户)是你自己定义的，并且蠕虫进程从一个网页视图中被实时监测。这样会帮助你来实现测试，在真实用户使用前定义系统的瓶颈。&lt;/p>
&lt;p>Locust是完全基于事件的，因此可以在单台机器中支持数以千计的用户在线。和其它基于事件的程序相比较，它是不需要使用回调的。相反，它通过&lt;a href="http://www.gevent.org/">gevent&lt;/a>使用轻量级的进程。每一个locust测试你的网站时，实际上是真实的在内部运行它自己的进程(或greenlet,准确的说)。这样就允许你不使用复杂的回调方法，而是使用Python编写复杂的场景。&lt;/p></description></item><item><title>分布式测试</title><link>https://shiyuanjie.cn/posts/Locust/Locust%E5%88%86%E5%B8%83%E5%BC%8F%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 03 Jun 2017 21:30:00 +0000</pubDate><guid>https://shiyuanjie.cn/posts/Locust/Locust%E5%88%86%E5%B8%83%E5%BC%8F%E6%B5%8B%E8%AF%95/</guid><description>&lt;h2 id="分布式运行locust">分布式运行Locust&lt;/h2>
&lt;p>一旦单台机器不够模拟足够多的用户时，Locust支持运行在多台机器中进行压力测试。&lt;/p>
&lt;p>为了实现这个，你应该在&lt;code>master&lt;/code>模式中使用&lt;code>--master&lt;/code>标记来启用一个Locust实例。这个实例将会运行你启动测试的Locust交互网站并查看实时统计数据。&lt;code>master&lt;/code>节点的机器自身不会模拟任何用户。相反，你必须使用&lt;code>--slave&lt;/code>标记启动一台到多台Locust&lt;code>slave&lt;/code>机器节点，与标记&lt;code>--master-host&lt;/code>一起使用(指出&lt;code>master&lt;/code>机器的&lt;code>IP/hostname&lt;/code>)。&lt;/p>
&lt;p>常用的做法是在一台独立的机器中运行master，在&lt;code>slave&lt;/code>机器中每个处理器内核运行一个&lt;code>slave&lt;/code>实例。&lt;/p>
&lt;p>** !Note **&lt;/p>
&lt;p>** &lt;code>master&lt;/code>和每一台&lt;code>slave&lt;/code>机器，在运行分布式测试时都&lt;code>必须&lt;/code>要有locust的测试文件。**&lt;/p></description></item><item><title>编写一个Locust文件</title><link>https://shiyuanjie.cn/posts/Locust/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AALocust%E6%96%87%E4%BB%B6/</link><pubDate>Fri, 02 Jun 2017 21:30:00 +0000</pubDate><guid>https://shiyuanjie.cn/posts/Locust/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AALocust%E6%96%87%E4%BB%B6/</guid><description>&lt;p>Locust文件就是一般的Python文件。唯一的需求就是它至少需要一个继承于&lt;code>Locust&lt;/code>的类.&lt;/p>
&lt;h2 id="locust类">Locust类&lt;/h2>
&lt;p>Locust类代表一个用户(如果愿意，也可以是一个准备出动的蝗虫)。Locust会为每一个模拟用户生成一个locust类实例。同时会有一些locust类属性被定义。&lt;/p>
&lt;h3 id="task_set属性">&lt;code>task_set&lt;/code>属性&lt;/h3>
&lt;p>&lt;code>task_set&lt;/code>属性是指向一个定义用户行为的&lt;code>TaskSet&lt;/code>类，下面会有详细的介绍。&lt;/p>
&lt;h3 id="min_wait和max_wait属性">&lt;code>min_wait&lt;/code>和&lt;code>max_wait&lt;/code>属性&lt;/h3>
&lt;p>除了&lt;code>task_set&lt;/code>属性，另外一个经常被使用的就是&lt;code>min_wait&lt;/code>和&lt;code>max_wait&lt;/code>属性。是用于各自以毫秒为单位的最小值和最大值，一个模拟用户将会在每个任务执行时的等待执行的时间间隔。&lt;code>min_wait&lt;/code>和&lt;code>max_wait&lt;/code>默认设置为&lt;code>1000&lt;/code>，如果不声明的话，Locust会默认在每个任务间等待&lt;code>1秒&lt;/code>。&lt;/p>
&lt;p>参考下面的代码，每个用户将会在每个任务间等待&lt;code>5至15&lt;/code>秒:&lt;/p>
&lt;pre>&lt;code>from locust import Locust, TaskSet, task_set
class MyTaskSet(TaskSet):
@task
def my_task(self):
print &amp;quot;executing my_task&amp;quot;
class MyLocust(Locust):
task_set = MyTaskSet
min_wait = 5000
max_wait = 15000
&lt;/code>&lt;/pre>&lt;p>&lt;code>min_wait&lt;/code>和&lt;code>max_wait&lt;/code>属性可以用于重写&lt;code>TaskSet&lt;/code>类。&lt;/p></description></item><item><title>Locust快速入门</title><link>https://shiyuanjie.cn/posts/Locust/Locust%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</link><pubDate>Wed, 24 May 2017 18:20:00 +0000</pubDate><guid>https://shiyuanjie.cn/posts/Locust/Locust%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</guid><description>&lt;pre>&lt;code>Locust，基于Python的性能测试工具。
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;a href="http://docs.locust.io/en/latest/what-is-locust.html">什么是Locust&lt;/a>&lt;/li>
&lt;li>本文&lt;a href="http://locust.io/">Locust&lt;/a>版本&lt;code>0.7.5&lt;/code>&lt;/li>
&lt;li>原文地址：&lt;a href="http://docs.locust.io/en/latest/quickstart.html#">http://docs.locust.io/en/latest/quickstart.html#&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="示例locustfilepy">示例&lt;code>locustfile.py&lt;/code>&lt;/h2>
&lt;p>下面是一个简单的&lt;code>locustfile.py&lt;/code>小示例:&lt;/p>
&lt;pre>&lt;code>from locust import HttpLocust, TaskSet
def login(l):
l.client.post(&amp;quot;/login&amp;quot;, {&amp;quot;username&amp;quot;:&amp;quot;ellen_key&amp;quot;, &amp;quot;password&amp;quot;:&amp;quot;education&amp;quot;})
def index(l):
l.client.get(&amp;quot;/&amp;quot;)
def profile(l):
l.client.get(&amp;quot;/profile&amp;quot;)
class UserBehavior(TaskSet):
tasks = {index: 2, profile: 1}
def on_start(self):
login(self)
class WebsiteUser(HttpLocust):
task_set = UserBehavior
min_wait = 5000
max_wait = 9000
&lt;/code>&lt;/pre></description></item></channel></rss>